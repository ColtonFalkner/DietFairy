// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"assets/login-icon.png":[function(require,module,exports) {
module.exports = "/login-icon.6f219a42.png";
},{}],"components/Login/styles.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formStyles = exports.showModalStyles = exports.hideModalStyles = void 0;

var _core = require("@emotion/core");

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const hideModalStyles = false ? {
  name: "n1m2px-hideModalStyles",
  styles: "display:grid;grid-template-areas:\"info\" \"login\";grid-template-columns:1fr;grid-template-rows:1fr 2fr;overflow-y:auto;@media (min-width:800px){grid-template-areas:\"info login\";grid-template-columns:1.25fr 1fr;grid-template-rows:1fr;};label:hideModalStyles;"
} : {
  name: "n1m2px-hideModalStyles",
  styles: "display:grid;grid-template-areas:\"info\" \"login\";grid-template-columns:1fr;grid-template-rows:1fr 2fr;overflow-y:auto;@media (min-width:800px){grid-template-areas:\"info login\";grid-template-columns:1.25fr 1fr;grid-template-rows:1fr;};label:hideModalStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFa0MiLCJmaWxlIjoic3R5bGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3NzIH0gZnJvbSBcIkBlbW90aW9uL2NvcmVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBoaWRlTW9kYWxTdHlsZXMgPSBjc3NgXHJcbiAgZGlzcGxheTogZ3JpZDtcclxuICBncmlkLXRlbXBsYXRlLWFyZWFzOlxyXG4gICAgXCJpbmZvXCJcclxuICAgIFwibG9naW5cIjtcclxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcclxuICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmciAyZnI7XHJcbiAgb3ZlcmZsb3cteTogYXV0bztcclxuXHJcbiAgQG1lZGlhIChtaW4td2lkdGg6IDgwMHB4KSB7XHJcbiAgICBncmlkLXRlbXBsYXRlLWFyZWFzOiBcImluZm8gbG9naW5cIjtcclxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMS4yNWZyIDFmcjtcclxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyO1xyXG4gIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBzaG93TW9kYWxTdHlsZXMgPSBjc3NgXHJcbiAgZGlzcGxheTogZ3JpZDtcclxuICBncmlkLXRlbXBsYXRlLWFyZWFzOiBcImluZm8gbG9naW5cIjtcclxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDEuMjVmciAxZnI7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxZnI7XHJcbiAgb3ZlcmZsb3cteTogYXV0bztcclxuICB0cmFuc2l0aW9uOiBmaWx0ZXIgMjUwbXMgbGluZWFyO1xyXG4gIGZpbHRlcjogYmx1cig1cHgpO1xyXG5cclxuICBAbWVkaWEgKG1heC13aWR0aDogODAwcHgpIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgdHJhbnNpdGlvbjogZmlsdGVyIDI1MG1zIGxpbmVhcjtcclxuICAgIGZpbHRlcjogYmx1cig1cHgpO1xyXG4gIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBmb3JtU3R5bGVzID0gY3NzYFxyXG4gIGRpc3BsYXk6IGdyaWQ7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1hcmVhczpcclxuICAgIFwiaGVhZGVyXCJcclxuICAgIFwibmFtZVwiXHJcbiAgICBcImJyZWFrXCJcclxuICAgIFwiZW1haWxcIlxyXG4gICAgXCJwYXNzd29yZFwiXHJcbiAgICBcImNyZWF0ZVwiXHJcbiAgICBcImZvcmdvdFwiO1xyXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xyXG4gIGdyaWQtdGVtcGxhdGUtcm93czpcclxuICAgIDJmciBtaW5tYXgoMzBweCwgMWZyKSAxMHB4IHJlcGVhdCgzLCBtaW5tYXgoMzBweCwgMWZyKSlcclxuICAgIDI1cHg7XHJcbiAgZ3JpZC1nYXA6IDFyZW07XHJcbiAgYm9yZGVyOiAycHggc29saWQgIzU1NTtcclxuICBib3JkZXItcmFkaXVzOiA0JTtcclxuICBwYWRkaW5nOiAycmVtIDNyZW07XHJcbiAgYmFja2dyb3VuZDogd2hpdGU7XHJcbiAgYm94LXNoYWRvdzogMTBweCAxM3B4IDEwcHggLTVweCByZ2JhKDAsIDAsIDAsIDAuMjYpO1xyXG5cclxuICBAbWVkaWEgKG1pbi13aWR0aDogODAwcHgpIHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogNTAlO1xyXG4gICAgbGVmdDogNTAlO1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XHJcbiAgICBoZWlnaHQ6IDc1JTtcclxuICAgIHdpZHRoOiA1NSU7XHJcbiAgICBhbmltYXRpb246IGZhZGUgNDAwbXMgZWFzZS1pbjtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIGZhZGUge1xyXG4gICAgICBmcm9tIHtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNDklKTtcclxuICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICB9XHJcbiAgICAgIHRvIHtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcclxuICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
exports.hideModalStyles = hideModalStyles;
const showModalStyles = false ? {
  name: "12tfmvp-showModalStyles",
  styles: "display:grid;grid-template-areas:\"info login\";grid-template-columns:1.25fr 1fr;grid-template-rows:1fr;overflow-y:auto;transition:filter 250ms linear;filter:blur(5px);@media (max-width:800px){display:flex;flex-direction:column;transition:filter 250ms linear;filter:blur(5px);};label:showModalStyles;"
} : {
  name: "12tfmvp-showModalStyles",
  styles: "display:grid;grid-template-areas:\"info login\";grid-template-columns:1.25fr 1fr;grid-template-rows:1fr;overflow-y:auto;transition:filter 250ms linear;filter:blur(5px);@media (max-width:800px){display:flex;flex-direction:column;transition:filter 250ms linear;filter:blur(5px);};label:showModalStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrQmtDIiwiZmlsZSI6InN0eWxlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNzcyB9IGZyb20gXCJAZW1vdGlvbi9jb3JlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaGlkZU1vZGFsU3R5bGVzID0gY3NzYFxyXG4gIGRpc3BsYXk6IGdyaWQ7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1hcmVhczpcclxuICAgIFwiaW5mb1wiXHJcbiAgICBcImxvZ2luXCI7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxZnIgMmZyO1xyXG4gIG92ZXJmbG93LXk6IGF1dG87XHJcblxyXG4gIEBtZWRpYSAobWluLXdpZHRoOiA4MDBweCkge1xyXG4gICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogXCJpbmZvIGxvZ2luXCI7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDEuMjVmciAxZnI7XHJcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmcjtcclxuICB9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3Qgc2hvd01vZGFsU3R5bGVzID0gY3NzYFxyXG4gIGRpc3BsYXk6IGdyaWQ7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogXCJpbmZvIGxvZ2luXCI7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxLjI1ZnIgMWZyO1xyXG4gIGdyaWQtdGVtcGxhdGUtcm93czogMWZyO1xyXG4gIG92ZXJmbG93LXk6IGF1dG87XHJcbiAgdHJhbnNpdGlvbjogZmlsdGVyIDI1MG1zIGxpbmVhcjtcclxuICBmaWx0ZXI6IGJsdXIoNXB4KTtcclxuXHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDgwMHB4KSB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIHRyYW5zaXRpb246IGZpbHRlciAyNTBtcyBsaW5lYXI7XHJcbiAgICBmaWx0ZXI6IGJsdXIoNXB4KTtcclxuICB9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgZm9ybVN0eWxlcyA9IGNzc2BcclxuICBkaXNwbGF5OiBncmlkO1xyXG4gIGdyaWQtdGVtcGxhdGUtYXJlYXM6XHJcbiAgICBcImhlYWRlclwiXHJcbiAgICBcIm5hbWVcIlxyXG4gICAgXCJicmVha1wiXHJcbiAgICBcImVtYWlsXCJcclxuICAgIFwicGFzc3dvcmRcIlxyXG4gICAgXCJjcmVhdGVcIlxyXG4gICAgXCJmb3Jnb3RcIjtcclxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcclxuICBncmlkLXRlbXBsYXRlLXJvd3M6XHJcbiAgICAyZnIgbWlubWF4KDMwcHgsIDFmcikgMTBweCByZXBlYXQoMywgbWlubWF4KDMwcHgsIDFmcikpXHJcbiAgICAyNXB4O1xyXG4gIGdyaWQtZ2FwOiAxcmVtO1xyXG4gIGJvcmRlcjogMnB4IHNvbGlkICM1NTU7XHJcbiAgYm9yZGVyLXJhZGl1czogNCU7XHJcbiAgcGFkZGluZzogMnJlbSAzcmVtO1xyXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xyXG4gIGJveC1zaGFkb3c6IDEwcHggMTNweCAxMHB4IC01cHggcmdiYSgwLCAwLCAwLCAwLjI2KTtcclxuXHJcbiAgQG1lZGlhIChtaW4td2lkdGg6IDgwMHB4KSB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDUwJTtcclxuICAgIGxlZnQ6IDUwJTtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xyXG4gICAgaGVpZ2h0OiA3NSU7XHJcbiAgICB3aWR0aDogNTUlO1xyXG4gICAgYW5pbWF0aW9uOiBmYWRlIDQwMG1zIGVhc2UtaW47XHJcblxyXG4gICAgQGtleWZyYW1lcyBmYWRlIHtcclxuICAgICAgZnJvbSB7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTQ5JSk7XHJcbiAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgfVxyXG4gICAgICB0byB7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XHJcbiAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
exports.showModalStyles = showModalStyles;
const formStyles = false ? {
  name: "6h4m5f-formStyles",
  styles: "display:grid;grid-template-areas:\"header\" \"name\" \"break\" \"email\" \"password\" \"create\" \"forgot\";grid-template-columns:1fr;grid-template-rows:2fr minmax(30px,1fr) 10px repeat(3,minmax(30px,1fr)) 25px;grid-gap:1rem;border:2px solid #555;border-radius:4%;padding:2rem 3rem;background:white;box-shadow:10px 13px 10px -5px rgba(0,0,0,0.26);@media (min-width:800px){position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);height:75%;width:55%;animation:fade 400ms ease-in;@keyframes fade{from{transform:translate(-50%,-49%);opacity:0;}to{transform:translate(-50%,-50%);opacity:1;}}};label:formStyles;"
} : {
  name: "6h4m5f-formStyles",
  styles: "display:grid;grid-template-areas:\"header\" \"name\" \"break\" \"email\" \"password\" \"create\" \"forgot\";grid-template-columns:1fr;grid-template-rows:2fr minmax(30px,1fr) 10px repeat(3,minmax(30px,1fr)) 25px;grid-gap:1rem;border:2px solid #555;border-radius:4%;padding:2rem 3rem;background:white;box-shadow:10px 13px 10px -5px rgba(0,0,0,0.26);@media (min-width:800px){position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);height:75%;width:55%;animation:fade 400ms ease-in;@keyframes fade{from{transform:translate(-50%,-49%);opacity:0;}to{transform:translate(-50%,-50%);opacity:1;}}};label:formStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtQzZCIiwiZmlsZSI6InN0eWxlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNzcyB9IGZyb20gXCJAZW1vdGlvbi9jb3JlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaGlkZU1vZGFsU3R5bGVzID0gY3NzYFxyXG4gIGRpc3BsYXk6IGdyaWQ7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1hcmVhczpcclxuICAgIFwiaW5mb1wiXHJcbiAgICBcImxvZ2luXCI7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxZnIgMmZyO1xyXG4gIG92ZXJmbG93LXk6IGF1dG87XHJcblxyXG4gIEBtZWRpYSAobWluLXdpZHRoOiA4MDBweCkge1xyXG4gICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogXCJpbmZvIGxvZ2luXCI7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDEuMjVmciAxZnI7XHJcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmcjtcclxuICB9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3Qgc2hvd01vZGFsU3R5bGVzID0gY3NzYFxyXG4gIGRpc3BsYXk6IGdyaWQ7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogXCJpbmZvIGxvZ2luXCI7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxLjI1ZnIgMWZyO1xyXG4gIGdyaWQtdGVtcGxhdGUtcm93czogMWZyO1xyXG4gIG92ZXJmbG93LXk6IGF1dG87XHJcbiAgdHJhbnNpdGlvbjogZmlsdGVyIDI1MG1zIGxpbmVhcjtcclxuICBmaWx0ZXI6IGJsdXIoNXB4KTtcclxuXHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDgwMHB4KSB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIHRyYW5zaXRpb246IGZpbHRlciAyNTBtcyBsaW5lYXI7XHJcbiAgICBmaWx0ZXI6IGJsdXIoNXB4KTtcclxuICB9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgZm9ybVN0eWxlcyA9IGNzc2BcclxuICBkaXNwbGF5OiBncmlkO1xyXG4gIGdyaWQtdGVtcGxhdGUtYXJlYXM6XHJcbiAgICBcImhlYWRlclwiXHJcbiAgICBcIm5hbWVcIlxyXG4gICAgXCJicmVha1wiXHJcbiAgICBcImVtYWlsXCJcclxuICAgIFwicGFzc3dvcmRcIlxyXG4gICAgXCJjcmVhdGVcIlxyXG4gICAgXCJmb3Jnb3RcIjtcclxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcclxuICBncmlkLXRlbXBsYXRlLXJvd3M6XHJcbiAgICAyZnIgbWlubWF4KDMwcHgsIDFmcikgMTBweCByZXBlYXQoMywgbWlubWF4KDMwcHgsIDFmcikpXHJcbiAgICAyNXB4O1xyXG4gIGdyaWQtZ2FwOiAxcmVtO1xyXG4gIGJvcmRlcjogMnB4IHNvbGlkICM1NTU7XHJcbiAgYm9yZGVyLXJhZGl1czogNCU7XHJcbiAgcGFkZGluZzogMnJlbSAzcmVtO1xyXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xyXG4gIGJveC1zaGFkb3c6IDEwcHggMTNweCAxMHB4IC01cHggcmdiYSgwLCAwLCAwLCAwLjI2KTtcclxuXHJcbiAgQG1lZGlhIChtaW4td2lkdGg6IDgwMHB4KSB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDUwJTtcclxuICAgIGxlZnQ6IDUwJTtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xyXG4gICAgaGVpZ2h0OiA3NSU7XHJcbiAgICB3aWR0aDogNTUlO1xyXG4gICAgYW5pbWF0aW9uOiBmYWRlIDQwMG1zIGVhc2UtaW47XHJcblxyXG4gICAgQGtleWZyYW1lcyBmYWRlIHtcclxuICAgICAgZnJvbSB7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTQ5JSk7XHJcbiAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgfVxyXG4gICAgICB0byB7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XHJcbiAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
exports.formStyles = formStyles;
},{"@emotion/core":"../node_modules/@emotion/core/dist/core.browser.esm.js"}],"components/Login/Login.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _hooks = require("../../hooks");

var _reactRouterDom = require("react-router-dom");

var _Warning = _interopRequireDefault(require("../Warning/Warning"));

var _loginIcon = _interopRequireDefault(require("../../assets/login-icon.png"));

var _core = require("@emotion/core");

var _styles = require("./styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

// Initial Form state
const initialState = {
  username: "",
  email: "",
  password: ""
};

var _ref = false ? {
  name: "19wd8g7-Login",
  styles: "grid-area:info;width:100%;height:100%;position:relative;background:var(--signup);;label:Login;"
} : {
  name: "19wd8g7-Login",
  styles: "grid-area:info;width:100%;height:100%;position:relative;background:var(--signup);;label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref2 = false ? {
  name: "1eaavh9-Login",
  styles: "@media (min-width:700px){position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);animation:fade 400ms ease-in;@keyframes fade{from{transform:translate(-50%,-49%);opacity:0;}to{transform:translate(-50%,-50%);opacity:1;}}}@media (max-width:700px){padding:2rem;animation:none;};label:Login;"
} : {
  name: "1eaavh9-Login",
  styles: "@media (min-width:700px){position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);animation:fade 400ms ease-in;@keyframes fade{from{transform:translate(-50%,-49%);opacity:0;}to{transform:translate(-50%,-50%);opacity:1;}}}@media (max-width:700px){padding:2rem;animation:none;};label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref3 = false ? {
  name: "41lu8b-Login",
  styles: "padding:1rem 2rem;font-family:var(--secondary-font);font-style:italic;;label:Login;"
} : {
  name: "41lu8b-Login",
  styles: "padding:1rem 2rem;font-family:var(--secondary-font);font-style:italic;;label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref4 = false ? {
  name: "j0s0ck-Login",
  styles: "padding:1rem 2rem;line-height:1.7;;label:Login;"
} : {
  name: "j0s0ck-Login",
  styles: "padding:1rem 2rem;line-height:1.7;;label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref5 = false ? {
  name: "1gxom1f-Login",
  styles: "padding:1rem 2rem;;label:Login;"
} : {
  name: "1gxom1f-Login",
  styles: "padding:1rem 2rem;;label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref6 = false ? {
  name: "1m82fgo-Login",
  styles: "display:block;padding:0.4rem 0;;label:Login;"
} : {
  name: "1m82fgo-Login",
  styles: "display:block;padding:0.4rem 0;;label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref7 = false ? {
  name: "18jzxvy-Login",
  styles: "color:black;line-height:1.7;:visited{color:black;};label:Login;"
} : {
  name: "18jzxvy-Login",
  styles: "color:black;line-height:1.7;:visited{color:black;};label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref8 = false ? {
  name: "suar8n-Login",
  styles: "grid-area:login;height:100%;width:100%;position:relative;background:var(--alternate);@media (max-width:800px){padding:4rem;};label:Login;"
} : {
  name: "suar8n-Login",
  styles: "grid-area:login;height:100%;width:100%;position:relative;background:var(--alternate);@media (max-width:800px){padding:4rem;};label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref9 = false ? {
  name: "1mc0nxu-Login",
  styles: "grid-area:header;display:flex;text-align:center;align-self:center;justify-content:center;align-items:center;;label:Login;"
} : {
  name: "1mc0nxu-Login",
  styles: "grid-area:header;display:flex;text-align:center;align-self:center;justify-content:center;align-items:center;;label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref10 = false ? {
  name: "a9v25-Login",
  styles: "width:20%;height:20%;display:inline-block;;label:Login;"
} : {
  name: "a9v25-Login",
  styles: "width:20%;height:20%;display:inline-block;;label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxvZ2luLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVMd0IiLCJmaWxlIjoiTG9naW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZVNlYXJjaFF1ZXJ5LCB1c2VNb2RhbCB9IGZyb20gXCIuLi8uLi9ob29rc1wiO1xyXG5pbXBvcnQgeyBSZWRpcmVjdCwgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBXYXJuaW5nIGZyb20gXCIuLi9XYXJuaW5nL1dhcm5pbmdcIjtcclxuaW1wb3J0IExvZ2luSWNvbiBmcm9tIFwiLi4vLi4vYXNzZXRzL2xvZ2luLWljb24ucG5nXCI7XHJcblxyXG4vKiogQGpzeCBqc3ggKi9cclxuaW1wb3J0IHsgY3NzLCBqc3ggfSBmcm9tIFwiQGVtb3Rpb24vY29yZVwiO1xyXG5pbXBvcnQgeyBoaWRlTW9kYWxTdHlsZXMsIHNob3dNb2RhbFN0eWxlcywgZm9ybVN0eWxlcyB9IGZyb20gXCIuL3N0eWxlc1wiO1xyXG5cclxuLy8gSW5pdGlhbCBGb3JtIHN0YXRlXHJcbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcclxuICB1c2VybmFtZTogXCJcIixcclxuICBlbWFpbDogXCJcIixcclxuICBwYXNzd29yZDogXCJcIlxyXG59O1xyXG5cclxuY29uc3QgTG9naW4gPSAoKSA9PiB7XHJcbiAgLy8gUmVkdXggc3RhdGVcclxuICBjb25zdCB7IHNlYXJjaFF1ZXJ5IH0gPSB1c2VTZWFyY2hRdWVyeSgpO1xyXG4gIGNvbnN0IHsgaXNNb2RhbFNob3dpbmcsIHNob3dNb2RhbCB9ID0gdXNlTW9kYWwoKTtcclxuXHJcbiAgLy8gTG9jYWwgRm9ybSBzdGF0ZVxyXG4gIGNvbnN0IFtmb3JtLCBzZXRGb3JtXSA9IHVzZVN0YXRlKGluaXRpYWxTdGF0ZSk7XHJcblxyXG4gIC8vIFJlZlxyXG4gIGNvbnN0IGZpcnN0UmVuZGVyID0gdXNlUmVmKHRydWUpO1xyXG5cclxuICAvLyBBZnRlciBNb2RhbCBjbG9zZXMsIHJlc2V0IGZvcm0gdmFsdWUgYW5kIGZpcnN0UmVuZGVyIHJlZlxyXG4gIGNvbnN0IHJlc2V0VmFsdWVzID0gKCkgPT4ge1xyXG4gICAgc2V0Rm9ybShpbml0aWFsU3RhdGUpO1xyXG4gICAgZmlyc3RSZW5kZXIuY3VycmVudCA9IHRydWU7XHJcbiAgfTtcclxuXHJcbiAgLy8gT24gdXNlciBpbnB1dCwgdXBkYXRlIHRhcmdldCBmb3JtIGZpZWxkXHJcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGZvcm1GaWVsZCwgZSkgPT4ge1xyXG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gZS50YXJnZXQ7XHJcbiAgICBzZXRGb3JtKHByZXZTdGF0ZSA9PiAoe1xyXG4gICAgICAuLi5wcmV2U3RhdGUsXHJcbiAgICAgIFtmb3JtRmllbGRdOiB2YWx1ZVxyXG4gICAgfSkpO1xyXG4gIH07XHJcblxyXG4gIC8vIEFzIHVzZXIgaW5wdXRzIGludG8gZm9ybSwgdHJpZ2dlciBhIGRlbGF5IGZvbGxvd2VkIGJ5IHBvcC11cCBNb2RhbFxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCBzaG93TW9kYWxGcmFtZSA9ICgpID0+IHNob3dNb2RhbCgpO1xyXG5cclxuICAgIGlmIChmaXJzdFJlbmRlci5jdXJyZW50ID09PSBmYWxzZSkge1xyXG4gICAgICBjb25zdCBkZWxheUJlZm9yZU1vZGFsU2hvd3MgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc2hvd01vZGFsRnJhbWUpO1xyXG4gICAgICAgIHJlc2V0VmFsdWVzKCk7XHJcbiAgICAgIH0sIDEwMDApO1xyXG5cclxuICAgICAgcmV0dXJuICgpID0+IGNsZWFyVGltZW91dChkZWxheUJlZm9yZU1vZGFsU2hvd3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpcnN0UmVuZGVyLmN1cnJlbnQgPSBmYWxzZTtcclxuICB9LCBbZm9ybV0pO1xyXG5cclxuICAvLyBJZiB1c2VycyBhdHRlbXB0cyB0byBzZWFyY2ggZnJvbSB0aGlzIHBhZ2UsIHJlZGlyZWN0IHZpZXcgdG8gaG9tZSBwYWdlXHJcbiAgaWYgKHNlYXJjaFF1ZXJ5Lmxlbmd0aCA+IDApIHtcclxuICAgIHJldHVybiA8UmVkaXJlY3QgdG89XCIvXCI+PC9SZWRpcmVjdD47XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgICAgPGRpdiBjc3M9eyFpc01vZGFsU2hvd2luZyA/IGhpZGVNb2RhbFN0eWxlcyA6IHNob3dNb2RhbFN0eWxlc30+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGdyaWQtYXJlYTogaW5mbztcclxuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1zaWdudXApO1xyXG4gICAgICAgICAgYH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIEBtZWRpYSAobWluLXdpZHRoOiA3MDBweCkge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgICAgICAgdG9wOiA1MCU7XHJcbiAgICAgICAgICAgICAgICBsZWZ0OiA1MCU7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogZmFkZSA0MDBtcyBlYXNlLWluO1xyXG5cclxuICAgICAgICAgICAgICAgIEBrZXlmcmFtZXMgZmFkZSB7XHJcbiAgICAgICAgICAgICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC00OSUpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMnJlbTtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogbm9uZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxoMVxyXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMXJlbSAycmVtO1xyXG4gICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IHZhcigtLXNlY29uZGFyeS1mb250KTtcclxuICAgICAgICAgICAgICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcclxuICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgTG9naW4gbm93IHRvIHNhdmUgeW91ciBmYXZvcml0ZSBSZWNpcGVzIVxyXG4gICAgICAgICAgICA8L2gxPlxyXG4gICAgICAgICAgICA8cFxyXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMXJlbSAycmVtO1xyXG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNztcclxuICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgU2VlIHNvbWV0aGluZyB0aGF0IHRpY2tsZXMgeW91ciBmYW5jeT8gTG9naW4gbm93IHRvIHNhdmUgaXQgZm9yXHJcbiAgICAgICAgICAgICAgZnV0dXJlIHJlZmVyZW5jZSFcclxuICAgICAgICAgICAgPC9wPlxyXG5cclxuICAgICAgICAgICAgPHBcclxuICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDFyZW0gMnJlbTtcclxuICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPGVtXHJcbiAgICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAuNHJlbSAwO1xyXG4gICAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICBTdGlsbCBuZWVkIHRvIHNpZ24gdXA/e1wiIFwifVxyXG4gICAgICAgICAgICAgIDwvZW0+XHJcbiAgICAgICAgICAgICAgRG8gbm90IGZyZXQuIEhlYWQgdG8gb3Vye1wiIFwifVxyXG4gICAgICAgICAgICAgIDxMaW5rXHJcbiAgICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6IGJsYWNrO1xyXG4gICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMS43O1xyXG5cclxuICAgICAgICAgICAgICAgICAgOnZpc2l0ZWQge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBibGFjaztcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgICAgIHRvPVwiL3NpZ251cFwiXHJcbiAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgc2lnbnVwXHJcbiAgICAgICAgICAgICAgPC9MaW5rPntcIiBcIn1cclxuICAgICAgICAgICAgICBwYWdlLlxyXG4gICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2XHJcbiAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgZ3JpZC1hcmVhOiBsb2dpbjtcclxuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1hbHRlcm5hdGUpO1xyXG5cclxuICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDgwMHB4KSB7XHJcbiAgICAgICAgICAgICAgcGFkZGluZzogNHJlbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgYH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8Zm9ybVxyXG4gICAgICAgICAgICBjc3M9e2Zvcm1TdHlsZXN9XHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e2UgPT4gZS5wcmV2ZW50RGVmYXVsdCgpfVxyXG4gICAgICAgICAgICBhdXRvQ29tcGxldGU9XCJvZmZcIlxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICBncmlkLWFyZWE6IGhlYWRlcjtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxpbWdcclxuICAgICAgICAgICAgICAgIHNyYz17TG9naW5JY29ufVxyXG4gICAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMCU7XHJcbiAgICAgICAgICAgICAgICAgIGhlaWdodDogMjAlO1xyXG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgPGgxXHJcbiAgICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgICAgICAgICAgICAgcGFkZGluZzogMC41cmVtIDJyZW07XHJcbiAgICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIExvZ2luXHJcbiAgICAgICAgICAgICAgPC9oMT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgZ3JpZC1hcmVhOiBuYW1lO1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAwLjc1cmVtO1xyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMC4ycmVtIDAuNzVyZW07XHJcbiAgICAgICAgICAgICAgICBmb250LXN0eWxlOiBpdGFsaWM7XHJcbiAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJFbnRlciBVc2VybmFtZVwiXHJcbiAgICAgICAgICAgICAgdmFsdWU9e2Zvcm0udXNlcm5hbWV9XHJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4gaGFuZGxlQ2hhbmdlKFwidXNlcm5hbWVcIiwgZSl9XHJcbiAgICAgICAgICAgID48L2lucHV0PlxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICBncmlkLWFyZWE6IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLjVyZW07XHJcbiAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMC44NXJlbTtcclxuICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICAgICAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBtaW5tYXgoMjBweCwgMWZyKSBhdXRvIG1pbm1heChcclxuICAgICAgICAgICAgICAgICAgICAgIDIwcHgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAxZnJcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICBncmlkLWdhcDogMTlweDtcclxuICAgICAgICAgICAgICAgICAgZm9udC1zdHlsZTogaXRhbGljO1xyXG5cclxuICAgICAgICAgICAgICAgICAgOjpiZWZvcmUge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICM0NDQ7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgIDo6YWZ0ZXIge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICM0NDQ7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgb3JcclxuICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgIGdyaWQtYXJlYTogZW1haWw7XHJcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDAuNzVyZW07XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLjJyZW0gMC43NXJlbTtcclxuICAgICAgICAgICAgICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcclxuICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIEVtYWlsXCJcclxuICAgICAgICAgICAgICBuYW1lPVwiZW1haWxcIlxyXG4gICAgICAgICAgICAgIHZhbHVlPXtmb3JtLmVtYWlsfVxyXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IGhhbmRsZUNoYW5nZShcImVtYWlsXCIsIGUpfVxyXG4gICAgICAgICAgICA+PC9pbnB1dD5cclxuICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICBncmlkLWFyZWE6IHBhc3N3b3JkO1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAwLjc1cmVtO1xyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMC4ycmVtIDAuNzVyZW07XHJcbiAgICAgICAgICAgICAgICBmb250LXN0eWxlOiBpdGFsaWM7XHJcbiAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgUGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgIHZhbHVlPXtmb3JtLnBhc3N3b3JkfVxyXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IGhhbmRsZUNoYW5nZShcInBhc3N3b3JkXCIsIGUpfVxyXG4gICAgICAgICAgICA+PC9pbnB1dD5cclxuICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgZ3JpZC1hcmVhOiBjcmVhdGU7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAjNjY5OWZmO1xyXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IDkwJTtcclxuICAgICAgICAgICAgICAgICAgd2lkdGg6IDkwJTtcclxuICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAyNTBtcztcclxuXHJcbiAgICAgICAgICAgICAgICAgIDpob3ZlciB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICMzYzZiZjY7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtlID0+IGUucHJldmVudERlZmF1bHQoKX1cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDAuNzVyZW07XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xyXG4gICAgICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICBTdWJtaXRcclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgIGdyaWQtYXJlYTogZm9yZ290O1xyXG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8TGluayB0bz1cIi9mb3Jnb3RcIj5cclxuICAgICAgICAgICAgICAgIDxlbVxyXG4gICAgICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDAuNzVyZW07XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGJsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDpob3ZlciB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICBGb3Jnb3QgeW91ciBwYXNzd29yZD9cclxuICAgICAgICAgICAgICAgIDwvZW0+XHJcbiAgICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIHtpc01vZGFsU2hvd2luZyAmJiA8V2FybmluZyAvPn1cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBMb2dpbjtcclxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref11 = false ? {
  name: "iebh9o-Login",
  styles: "font-weight:bold;display:inline-block;padding:0.5rem 2rem;;label:Login;"
} : {
  name: "iebh9o-Login",
  styles: "font-weight:bold;display:inline-block;padding:0.5rem 2rem;;label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref12 = false ? {
  name: "1uqqgva-Login",
  styles: "grid-area:name;font-size:0.75rem;padding:0.2rem 0.75rem;font-style:italic;;label:Login;"
} : {
  name: "1uqqgva-Login",
  styles: "grid-area:name;font-size:0.75rem;padding:0.2rem 0.75rem;font-style:italic;;label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref13 = false ? {
  name: "2i53gr-Login",
  styles: "grid-area:break;display:flex;justify-content:center;align-items:center;;label:Login;"
} : {
  name: "2i53gr-Login",
  styles: "grid-area:break;display:flex;justify-content:center;align-items:center;;label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref14 = false ? {
  name: "kdo6zr-Login",
  styles: "padding:0.5rem;font-size:0.85rem;width:100%;display:grid;align-items:center;text-align:center;grid-template-columns:minmax(20px,1fr) auto minmax( 20px,1fr );grid-gap:19px;font-style:italic;::before{content:\"\";border-top:1px solid #444;}::after{content:\"\";border-top:1px solid #444;};label:Login;"
} : {
  name: "kdo6zr-Login",
  styles: "padding:0.5rem;font-size:0.85rem;width:100%;display:grid;align-items:center;text-align:center;grid-template-columns:minmax(20px,1fr) auto minmax( 20px,1fr );grid-gap:19px;font-style:italic;::before{content:\"\";border-top:1px solid #444;}::after{content:\"\";border-top:1px solid #444;};label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref15 = false ? {
  name: "1poq8a-Login",
  styles: "grid-area:email;font-size:0.75rem;padding:0.2rem 0.75rem;font-style:italic;;label:Login;"
} : {
  name: "1poq8a-Login",
  styles: "grid-area:email;font-size:0.75rem;padding:0.2rem 0.75rem;font-style:italic;;label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref16 = false ? {
  name: "1w3ejzy-Login",
  styles: "grid-area:password;font-size:0.75rem;padding:0.2rem 0.75rem;font-style:italic;;label:Login;"
} : {
  name: "1w3ejzy-Login",
  styles: "grid-area:password;font-size:0.75rem;padding:0.2rem 0.75rem;font-style:italic;;label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref17 = false ? {
  name: "6avpq2-Login",
  styles: "grid-area:create;text-align:center;;label:Login;"
} : {
  name: "6avpq2-Login",
  styles: "grid-area:create;text-align:center;;label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref18 = false ? {
  name: "1o04dc1-Login",
  styles: "background:#6699ff;height:90%;width:90%;transition:background 250ms;:hover{cursor:pointer;background:#3c6bf6;};label:Login;"
} : {
  name: "1o04dc1-Login",
  styles: "background:#6699ff;height:90%;width:90%;transition:background 250ms;:hover{cursor:pointer;background:#3c6bf6;};label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref19 = false ? {
  name: "1cfo3hp-Login",
  styles: "font-size:0.75rem;color:white;;label:Login;"
} : {
  name: "1cfo3hp-Login",
  styles: "font-size:0.75rem;color:white;;label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref20 = false ? {
  name: "9k07ln-Login",
  styles: "grid-area:forgot;text-align:center;;label:Login;"
} : {
  name: "9k07ln-Login",
  styles: "grid-area:forgot;text-align:center;;label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref21 = false ? {
  name: "1hwdi86-Login",
  styles: "font-size:0.75rem;color:blue;text-decoration:underline;:hover{cursor:pointer;};label:Login;"
} : {
  name: "1hwdi86-Login",
  styles: "font-size:0.75rem;color:blue;text-decoration:underline;:hover{cursor:pointer;};label:Login;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

const Login = () => {
  // Redux state
  const {
    searchQuery
  } = (0, _hooks.useSearchQuery)();
  const {
    isModalShowing,
    showModal
  } = (0, _hooks.useModal)(); // Local Form state

  const [form, setForm] = (0, _react.useState)(initialState); // Ref

  const firstRender = (0, _react.useRef)(true); // After Modal closes, reset form value and firstRender ref

  const resetValues = () => {
    setForm(initialState);
    firstRender.current = true;
  }; // On user input, update target form field


  const handleChange = (formField, e) => {
    const {
      value
    } = e.target;
    setForm(prevState => ({ ...prevState,
      [formField]: value
    }));
  }; // As user inputs into form, trigger a delay followed by pop-up Modal


  (0, _react.useEffect)(() => {
    const showModalFrame = () => showModal();

    if (firstRender.current === false) {
      const delayBeforeModalShows = setTimeout(() => {
        requestAnimationFrame(showModalFrame);
        resetValues();
      }, 1000);
      return () => clearTimeout(delayBeforeModalShows);
    }

    firstRender.current = false;
  }, [form]); // If users attempts to search from this page, redirect view to home page

  if (searchQuery.length > 0) {
    return (0, _core.jsx)(_reactRouterDom.Redirect, {
      to: "/"
    });
  }

  return (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)("div", {
    css: !isModalShowing ? _styles.hideModalStyles : _styles.showModalStyles
  }, (0, _core.jsx)("div", {
    css: _ref
  }, (0, _core.jsx)("div", {
    css: _ref2
  }, (0, _core.jsx)("h1", {
    css: _ref3
  }, "Login now to save your favorite Recipes!"), (0, _core.jsx)("p", {
    css: _ref4
  }, "See something that tickles your fancy? Login now to save it for future reference!"), (0, _core.jsx)("p", {
    css: _ref5
  }, (0, _core.jsx)("em", {
    css: _ref6
  }, "Still need to sign up?", " "), "Do not fret. Head to our", " ", (0, _core.jsx)(_reactRouterDom.Link, {
    css: _ref7,
    to: "/signup"
  }, "signup"), " ", "page."))), (0, _core.jsx)("div", {
    css: _ref8
  }, (0, _core.jsx)("form", {
    css: _styles.formStyles,
    onClick: e => e.preventDefault(),
    autoComplete: "off"
  }, (0, _core.jsx)("div", {
    css: _ref9
  }, (0, _core.jsx)("img", {
    src: _loginIcon.default,
    css: _ref10
  }), (0, _core.jsx)("h1", {
    css: _ref11
  }, "Login")), (0, _core.jsx)("input", {
    css: _ref12,
    type: "text",
    placeholder: "Enter Username",
    value: form.username,
    onChange: e => handleChange("username", e)
  }), (0, _core.jsx)("div", {
    css: _ref13
  }, (0, _core.jsx)("span", {
    css: _ref14
  }, "or")), (0, _core.jsx)("input", {
    css: _ref15,
    type: "text",
    placeholder: "Enter Email",
    name: "email",
    value: form.email,
    onChange: e => handleChange("email", e)
  }), (0, _core.jsx)("input", {
    css: _ref16,
    type: "password",
    placeholder: "Enter Password",
    value: form.password,
    onChange: e => handleChange("password", e)
  }), (0, _core.jsx)("div", {
    css: _ref17
  }, (0, _core.jsx)("button", {
    css: _ref18,
    onClick: e => e.preventDefault()
  }, (0, _core.jsx)("span", {
    css: _ref19
  }, "Submit"))), (0, _core.jsx)("div", {
    css: _ref20
  }, (0, _core.jsx)(_reactRouterDom.Link, {
    to: "/forgot"
  }, (0, _core.jsx)("em", {
    css: _ref21
  }, "Forgot your password?")))))), isModalShowing && (0, _core.jsx)(_Warning.default, null));
};

var _default = Login;
exports.default = _default;
},{"react":"../node_modules/react/index.js","../../hooks":"hooks/index.js","react-router-dom":"../node_modules/react-router-dom/esm/react-router-dom.js","../Warning/Warning":"components/Warning/Warning.js","../../assets/login-icon.png":"assets/login-icon.png","@emotion/core":"../node_modules/@emotion/core/dist/core.browser.esm.js","./styles":"components/Login/styles.js"}],"../node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "59242" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../node_modules/parcel-bundler/src/builtins/hmr-runtime.js"], null)
//# sourceMappingURL=/Login.aa98dc64.js.map